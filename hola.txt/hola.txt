alfabeto = []
estados = []
estados_iniciales = []
estados_aceptados = []
transiciones = {}
with open('evaluando.json') as contenido:
 defincionAutomata = json.load(contenido)
 for automataValores in defincionAutomata['Automata']:
        alfabeto = automataValores['alphabet']
        estados = automataValores['states']
        estados_iniciales = automataValores['initial_state']
        estados_aceptados = automataValores['accepting_states']
        transiciones = automataValores['transitions']

print(alfabeto)                  
ev=Automatas()
ev.nfae_dfa(alfabeto,estados,estados_iniciales,estados_aceptados,transiciones)


def imprimir(self, estados, transiciones):
        que = nx.DiGraph()

        for arre in estados:
            que.add_node(arre)
        for t in transiciones:
            que.add_edge(t[2], t[0])

        pos = nx.spring_layout(que)
        plt.figure()
        nx.draw(que, \
        node_size=500,node_color='pink',alpha=0.9,\
        labels={node:node for node in que.nodes()})
        nx.draw_networkx_labels(que, edges_labels={}, with_labels = True)
        plt.axis('off')

        nx.draw(que, with_labels = True)
        plt.show()
      